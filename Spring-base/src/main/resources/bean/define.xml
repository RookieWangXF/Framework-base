<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"

       default-lazy-init="false"
       default-merge="false"
       default-autowire="byName"
       default-autowire-candidates=""
       default-init-method="info"
       default-destroy-method="info"
>
     <!--
     beans的属性：
            1. default-autowire: no不使用自动装配；byname根据对应的名字自动装配；byType根据装入的类型进行装配
            SetGunDog() 会查找 id为gunDog的bean
            SetDog() 查找Dog类或者实现此接口的子类，只能有一个
            2. default-autowire-candidates  设值false时候在上述查找时可将此bean略过
            3. default-init-method="" 默认初始化方法
            4. default-lazy-init=""  默认延迟初始化
            5. default-merge="" 所有bean的默认merge行为
            6 .default-autowire="" 默认自动装配方法
            7. default-destroy-method="" 默认销毁方法

            1. id命名为类名的首字母小写
            2. class路径为类的全名称路径，根据此进行类的反射;这个不能是接口，因为要创建实现类
            3. property属性驱动执行一次setter方法
                3.1 传入的值为基本数据类型，则 value =
                3.2 传入的是引用型，则 ref
            总结：一个bean即为一个java对象，靠无参的构造函数生成，一个property即为一次setter调用

            4. 设值别名 name,可以使用name属性或者alias标签
            5. depends-on 会在配置依赖项的时候先强制将依赖项初始化。
            11. abstract 设值抽象bean，只能被其他bean继承，理解是更改一次，子bean都跟着更改了。
            12. parent 子bean中的设置，与上一个对应。  继承不具备多态性，就是数值的传递
        -->

    <bean id="beansAttribute" class="cn.rookie.bean.define.BeansAttribute" lazy-init="true" depends-on="alias">
        <property name="beanAttribute" ref="beanAttribute"></property>
    </bean>

    <bean id="beanAttribute" class="cn.rookie.bean.define.BeanAttribute" >
        <property name="name" value="Rookie"> </property>
    </bean>

    <bean id="beanAttributeAlias" class="cn.rookie.bean.define.BeanAttribute" name="alias,alias2">
        <property name="name" value="Alias"> </property>
    </bean>

    <alias name="beanAttribute" alias="beanAttribute2"></alias>

    
    <bean id="axe" class="cn.rookie.bean.Axe"/>

    <bean id="innerAxe" class="cn.rookie.bean.Axe$InnerAxe"></bean>
</beans>
