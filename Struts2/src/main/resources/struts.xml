<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN" "http://struts.apache.org/dtds/struts-2.3.dtd">
<struts>
	<!-- 以下配置要遵照对应的顺序，也即加载的顺序 -->

	<!-- 常量配置 start-->
	<!--
		1. 常量配置可以在 struts.xml中，默认都是在struts-default.xml中配置的
		2. 可以加载web.xml中的常量
	-->
	<!-- 该属性指定需要Struts2处理的请求后缀，该属性的默认值是action，即所有匹配*.action的请求都由Struts2处理。 如果用户需要指定多个请求后缀，则多个后缀之间以英文逗号（,）隔开。 -->
	<constant name="struts.action.extension" value="action" />
	<!-- 是否启用开发模式(开发模式下设为true，这样可以打印出更详细的错误信息)[发布时:false] -->
	<constant name="struts.devMode" value="false" />
	<!-- struts配置文件改动后，是否重新加载(开发阶段最好true)[发布时:false] -->
	<constant name="struts.configuration.xml.reload" value="true" />
	<!-- 设置浏览器是否缓存静态内容(开发阶段最好false)[发布时:true] -->
	<constant name="struts.serve.static.browserCache" value="false" />
	<!--解决乱码 -->
	<constant name="struts.i18n.encoding" value="UTF-8" />
	<!-- 每次HTTP请求系统都重新加载资源文件[发布时:false] -->
	<constant name="struts.i18n.reload" value="false" />
	<!-- 用于加载国际化资源，不写默认 不加载 -->
	<constant name="struts.custom.i18n.resources" value="mess"/>
	<!-- 文件上传最大值 -->
	<constant name="struts.multipart.maxSize" value="104857600" />
	<!-- 让struts2支持动态方法调用 [发布时:false]-->
	<constant name="struts.enable.DynamicMethodInvocation" value="true" />
	<!-- Action名称中是否还是用斜线 -->
	<constant name="struts.enable.SlashesInActionNames" value="true" />
	<!-- 允许标签中使用表达式语法 -->
	<constant name="struts.tag.altSyntax" value="true" />
	<!-- 对于WebLogic,Orion,OC4J此属性应该设置成true -->
	<constant name="struts.dispatcher.parametersWorkaround" value="false" />
	<!-- 注解扫描的包结尾名 -->
	<constant name="struts.convention.package.locators" value="action" />

	<constant name="struts.mapper.class" value="org.apache.struts2.dispatcher.mapper.Restful2ActionMapper" />

	<constant name="struts.mapper.alwaysSelectFullNamespace" value="false" />

	<!-- 常量配置 end-->

	<!-- 用于加载其他配置文件 -->
	<include file="struts/hello.xml" />
	<include file="struts/edit.xml" />
	<include file="struts/exception.xml" />
	<include file="struts/register.xml" />

	<package name="default" extends="struts-default">
		<!-- 配置拦截器 -->
		<interceptors>
			<interceptor name="mySimple" class="cn.rookie.interceptor.SimpleInterceptor">
				<param name="name">简单拦截器</param>
			</interceptor>
			<interceptor name="myMethodSimple" class="cn.rookie.interceptor.MyFilterInterceptor">
				<param name="name">拦截方法的拦截器</param>
			</interceptor>
		</interceptors>

		<!-- 设置默认的action处理 当找不到请求处理的时候，默认使用这个-->
		<default-action-ref name="index" />
		<!-- 设置默认的处理类 -->
		<default-class-ref class="com.opensymphony.xwork2.ActionSupport" />

		<global-results>
			<result name="exception">/exception/exception.jsp</result>
			<result name="securityerror">/exception/securityerror.jsp</result>
		</global-results>

		<!--
			异常处理机制
			1. exception-mapping  用于查看指定的异常类型，和返回的结果类型
			2. 根据返回的结果类型，设置对应的处理异常视图

			exception: 指定异常类型
			result： 当出现异常的时候，指定对应的逻辑视图名称
		-->
		<global-exception-mappings>
			<exception-mapping result="securityerror"
							   exception="cn.rookie.exception.model.SecurityBreachException"  />
			<exception-mapping result="exception"
							   exception="java.sql.SQLException" />
			<exception-mapping result="exception"
							   exception="java.io.IOException" />
			<exception-mapping result="exception"
							   exception="java.lang.ArithmeticException" />
			<exception-mapping result="exception"
							   exception="java.lang.ClassCastException" />
			<exception-mapping result="exception"
							   exception="java.lang.NegativeArraySizeException" />
			<exception-mapping result="exception"
							   exception="java.lang.ArrayIndexOutOfBoundsException" />
			<exception-mapping result="exception"
							   exception="java.lang.NullPointerException" />
			<exception-mapping result="exception"
							   exception="java.lang.NoSuchMethodException" />
			<exception-mapping result="exception"
							   exception="java.lang.Exception" />
		</global-exception-mappings>

		<action name="index">
			<result>/index.jsp</result>
		</action>

	</package>

</struts>